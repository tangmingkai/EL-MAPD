#include "model/energy_model.h"

bool EnergyModel::IsValid(const vector<Agent>& agents,
                          const vector<Action>& actions) const {
  if (agents.size() != actions.size()) return false;
  bool res = true;
  for (int i = 0; i < agents.size(); i++) {
    int next = NextEnergy(agents[i], actions[i]);
    if (next <= 0) {
      errors_.push_back(
          make_tuple("out-of-battery", i, -1, agents[0].state.timestep + 1));
      return false;
    }
  }
  return false;
}

int EnergyModel::NextEnergy(const Agent& agent, const Action& action) const {
  return NextEnergy(agent.state.location, agent.is_loaded, agent.energy, action);
}
int EnergyModel::NextEnergy(const int& loc, const bool& is_loaded,
                            const int &original_energy,
                            const Action& action) const {
  int res = original_energy;
  if (action == Action::W) {
    res -= idle_comsumption_;
    if (env_.charges[loc])
      res = std::min(full_energy_, res + charge_energy_per_timestep_);
  } else if (is_loaded) {
    res -= active_loaded_comsumption_;
  } else {
    res -= active_unloaded_comsumption_;
  }
  res = std::max(res, 0);
  return res;
}